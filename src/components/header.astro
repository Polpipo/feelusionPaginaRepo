---
import { Image } from "astro:assets";
import { Icon } from "astro-icon";
import type { NavItem } from "@/types";
import Logo from "@/assets/logo.png";
import LanguageSelector from "@/components/language-selector.astro";
import MenuIcon from "@/components/icons/Menu.astro";
import CloseIcon from "@/components/icons/Close.astro";


import { getI18N } from "@/i18n";
let { url } = Astro
const pathname = url.pathname

let currentLocale = "es"
if (pathname.startsWith("/ca/")) {
  currentLocale = "ca";
} else if (pathname.startsWith("/en/")) {
  currentLocale = "en";
}
const i18n = getI18N({ currentLocale });
const HEADER = i18n.HEADER;

const Inicio = HEADER.HEADER_1
const SobreNosotros = HEADER.HEADER_2
const CasosExito = HEADER.HEADER_3
const NuestrosEventos = HEADER.HEADER_4
const NuestroServicio = HEADER.HEADER_5
const Contacto = HEADER.HEADER_6

const navItems: Array<NavItem> = [
  { title: Inicio, url: "/" },
  { title: SobreNosotros, url: "/sobre-nosotros" },
  { title: CasosExito, url: "/casos-exito" },
  { title: NuestrosEventos, url: "/eventos" },
  { title: NuestroServicio, url: "/servicio" },
  { title: Contacto, url: "/contacto" },
];
---

<header
  id="page-header"
  class="fixed top-0 z-20 flex gap-6 w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
> 
<div class="block md:hidden order-1">
  <LanguageSelector />
</div>
  <a
    class="logo flex items-center order-2 md:order-1 gap-3 hover:!text-default flex items-center gap-3 hover:!text-default transition-all transform hover:scale-110 duration-300"
    href="/"
  >
    <Image
      src={Logo}
      alt="Logo"
      class={"w-16 md:w-24"}
      width="100"
      height="100"
    />
  </a>
  <div class="order-3">
    <div class="flex items-center gap-6 ">
      <nav class="hidden md:block">
        <ul class="flex items-center gap-6 md:gap-12">
          {
            navItems.map(({ title, url }) => (
              <li class="hover:scale-105 duration-300">
                <a class="text-xs md:text-sm" href={url}>
                  {title}
                </a>
              </li>
            ))
          }
          <LanguageSelector />
        </ul>


      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn block md:hidden"
        aria-label="Navigation"
      >
        <MenuIcon />
      </button>
      <!-- <ThemeSwitcher /> -->
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <CloseIcon/>
            </button>
          </header>
          <div class="flex justify-center">
            <!--<Icon name="logomark" class="h-16" />-->
            <Image src={Logo} alt="Logo" class={"w-36"} *load loading="eager" />
          </div>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url }) => (
                  <li>
                    <a class="block py-4 text-center text-xl" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('nav a');

    // Primero, eliminar la clase activa de todos los enlaces
    navLinks.forEach(link => {
      link.classList.remove('active-tab');
    });

    // Luego, aÃ±adir la clase activa al enlace correspondiente
    navLinks.forEach(link => {
      if (link.getAttribute('href') === currentPath) {
        link.classList.add('active-tab');
      }
    });
  });

  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const halfClientHeight = window.innerHeight / 4;
    const d = halfClientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>


<style>
  .fixed-header {
    @apply fixed bottom-auto top-0;
    @apply bg-zinc-900 opacity-95  transition-all duration-300;
  } 
  .fixed-header .instagram {
    @apply hidden;
  }
  .fixed-header .logo {
    @apply block;
  }
  .modal.is-open {
    @apply block;
  }
</style>
